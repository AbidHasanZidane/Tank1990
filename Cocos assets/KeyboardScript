import { _decorator, Animation, Component, EventKeyboard, Input, input, KeyCode, Node, Vec3, Quat } from 'cc';
const { ccclass, property } = _decorator;

@ccclass('KeyboardScript')
export class KeyboardScript extends Component {
    private isWalking = false;
    private direction: Vec3 = new Vec3(0, 0, 0);

    onLoad() {
        input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);
        input.on(Input.EventType.KEY_UP, this.onKeyUp, this);
    }

    start() { }

    update(deltaTime: number) {
        if (this.isWalking) {
            const animation = this.getComponent(Animation);
            if (animation) {
                animation.crossFade("Walking");
            }
            const position = this.node.getPosition();
            this.node.setPosition(position.x + this.direction.x * 300 * deltaTime, position.y + this.direction.y * 300 * deltaTime);
        } else {
            const animation = this.getComponent(Animation);
            if (animation) {
                animation.stop();
            }
        }
    }

    onKeyDown(event: EventKeyboard) {
        switch (event.keyCode) {
            case KeyCode.ARROW_RIGHT:
                console.log("Pressed right arrow");
                this.isWalking = true;
                this.direction.set(1, 0, 0);  // Move right
                this.node.setRotationFromEuler(0, 0, -90); // Rotate right
                break;
            case KeyCode.ARROW_LEFT:
                console.log("Pressed left arrow");
                this.isWalking = true;
                this.direction.set(-1, 0, 0);  // Move left
                this.node.setRotationFromEuler(0, 0, 90); // Rotate left
                break;
            case KeyCode.ARROW_UP:
                console.log("Pressed up arrow");
                this.isWalking = true;
                this.direction.set(0, 1, 0);  // Move up
                this.node.setRotationFromEuler(0, 0, 0); // Rotate up
                break;
            case KeyCode.ARROW_DOWN:
                console.log("Pressed down arrow");
                this.isWalking = true;
                this.direction.set(0, -1, 0);  // Move down
                this.node.setRotationFromEuler(0, 0, 180); // Rotate down
                break;
        }
    }

    onKeyUp(event: EventKeyboard) {
        switch (event.keyCode) {
            case KeyCode.ARROW_RIGHT:
            case KeyCode.ARROW_LEFT:
            case KeyCode.ARROW_UP:
            case KeyCode.ARROW_DOWN:
                console.log("Unpressed arrow key");
                this.isWalking = false;
                this.direction.set(0, 0, 0);  // Stop movement
                break;
        }
    }
}
